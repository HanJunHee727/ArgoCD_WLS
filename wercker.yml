# Copyright 2017, 2018, Oracle Corporation and/or its affiliates.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

#
#  Wercker build file for Oracle WebLogic Server Kubernetes Operator
#

#
#  Wercker application is at : https://app.wercker.com/Oracle/weblogic-kubernetes-operator
#
#  Werkcer workflow looks like this:
#
#  build -> integration-tests -> promote-image
#                                if branch == master
#

box:
  id: store/oracle/serverjre
  username: $DOCKER_USERNAME
  password: $DOCKER_PASSWORD
  tag: 8

# This is the main build pipeline that builds the codebase and runs unit tests.
build:
  steps:
    - script:
        name: Hello
        code: |
          echo "Building Oracle WebLogic Server Kubernetes Operator..."
          echo "The commit id is $WERCKER_GIT_COMMIT"
    - script:
      name: Install pre-reqs
      code: |
        yum -y install tar gzip
    - java/maven:
        goals: clean install
        version: 3.5.2
        cache_repo: true
    - script:
        name: Copy built-artifacts into the image
        code: |
          mkdir /operator
          cp -R src/main/scripts/* /operator/
          cp target/weblogic-kubernetes-operator-0.1.0-alpha-SNAPSHOT.jar /operator/weblogic-kubernetes-operator.jar
    - script:
        name: Remove things we do not want in the Docker image in order to reduce size of image
        code: |
          # remove wercker directory
          # rm -rf /pipeline
          # remove unneeded RPMs and clean up the YUM cache
          yum -y remove tar gzip
          yum clean all

    # push the image to quay.io using the GIT commit id (first 8 chars) as the tag
    # this image needs to be available to the integration-test pipeline for testing
    - internal/docker-push:
        username: $QUAY_USERNAME
        password: $QUAY_PASSWORD
        email: $QUAY_EMAIL
        repository: quay.io/markxnelson/weblogic-kubernetes-operator
        tag: $WERCKER_GIT_COMMIT
        working-dir: "/operator"
        cmd: "operator.sh"
        env: "PATH=$PATH:/operator"


# This pipeline runs the integration tests against a real k8s cluster.
integration-test:  # run in weblogic container so that wlst is available
  steps:
    - script:
      name: Run integration tests
      code: |
        # Current plan is that we will use the bastion machine in our OCI tenancy, that has access to our
        # clusters, one 1.7 and one 1.8, and it will run the tests.
        # It should clone the repo, checkout the desired commit, grab the desired docker image (tagged with the
        # commit id) and then run the src/integration-tests/bash/run.sh (etc.) and report back results.
        # This approach means we do not need to expose any NodePorts on the cluster through the OCI
        # firewall to the public internet, just within our OCI compartment.

        # On the bastion:
        #   set up kubeconfig is set up to point to the cluster in OCI
        #   create a job yaml that mounts the PV's and empties them
        #   kubectl create job ....
        #   /pipeline/source/weblogic-kubernetes-operator/src/integration-tests/bash/clean.sh
        #   /pipeline/weblogic-kubernetes-operator/src/integration-tests/bash/run.sh

        sed -i -e "s,%ADDRESS%,$K8S_17_ADDRESS,g" /pipeline/source/build/kube.config
        sed -i -e "s,%CLIENT_CERT_DATA%,$K8S_17_CLIENT_CERT_DATA,g" /pipeline/source/build/kube.config
        sed -i -e "s,%CLIENT_KEY_DATA%,$K8S_17_CLIENT_KEY_DATA,g" /pipeline/source/build/kube.config
        export KUBECONFIG="/pipeline/source/build/kube.config"

        # install kubectl
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        mv ./kubectl /usr/local/bin/kubectl

        kubectl delete secret docker-store --ignore-not-found=true
        kubectl create secret docker-registry docker-store --docker-server=index.docker.io/v1/ --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL

        export RESULT_ROOT="/tmp/k8s_dir"
        mkdir -m 777 -p $RESULT_ROOT
        export PROJECT_ROOT="/pipeline/source"
        /pipeline/source/src/integration-tests/bash/cleanup.sh

        echo "Not yet implemented."
        echo "Eventually, I will run the integration test suite against the test image which is:"
        echo "quay.io/markxnelson/weblogic-kuberentes-operator:$WERCKER_GIT_COMMIT"


# This pipeline promotes the docker image after tests have passed
promote-image:
  steps:
    - script:
      name: echo
      code: |
        echo "Passed integration-tests, so pushing the image as 'latest'"
    # push the image to quay.io and tag it as "latest"
    # in reality, the image will already be there, so it is just updating the tag

    # use the quay.io REST API to change the tab "latest" to point to the image we just pushed and tested

dev:
  steps:
    - internal/shell
