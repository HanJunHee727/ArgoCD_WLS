# Copyright 2017, 2018, Oracle Corporation and/or its affiliates.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

#
#  Wercker build file for Oracle WebLogic Server Kubernetes Operator
#

#
#  Wercker application is at : https://app.wercker.com/Oracle/weblogic-kubernetes-operator
#
#  Werkcer workflow looks like this:
#
#  build -> integration-tests179
#        -> integration-tests185
#        -> quality
#

box:
  id: store/oracle/serverjre
  username: $DOCKER_USERNAME
  password: $DOCKER_PASSWORD
  tag: 8

# This is the main build pipeline that builds the codebase and runs unit tests.
build:
  steps:
  - script:
    name: Hello
    code: |
      echo "Building Oracle WebLogic Server Kubernetes Operator..."
      echo "The commit id is $WERCKER_GIT_COMMIT"
  - script:
    name: Install pre-reqs
    code: |
      yum -y install docker-engine
      systemctl start docker
      systemctl enable docker
      yum -y install tar gzip
  - java/maven:
    goals: clean install
    version: 3.5.2
    cache_repo: true
  - script:
    name: Copy built-artifacts into the image
    code: |
      mkdir /operator
      cp -R src/main/scripts/* /operator/
      cp target/weblogic-kubernetes-operator-0.1.0-alpha-SNAPSHOT.jar /operator/weblogic-kubernetes-operator.jar
  - script:
    name: Docker build and save
    code: |
      docker build -t weblogic-kubernetes-operator:$WERCKER_GIT_BRANCH --no-cache=true .
      docker save weblogic-kubernetes-operator:$WERCKER_GIT_BRANCH > $WERCKER_OUTPUT_DIR/operator.tar
  - script:
    name: Clean up
    code: |
      # remove unneeded RPMs and clean up the YUM cache
      yum -y remove tar gzip docker-engine
      yum clean all

# This pipeline runs the integration tests against 1.7.9 k8s cluster on OCI.
integration-test179:
  steps:
  - script:
    name: Run integration tests
    code: |
      # Copy Docker file to OCI host and load into local Docker registry
      echo $OCI_K8S_179_SSHKEY > /tmp/ssh_key
      scp -i /tmp/ssh_key $WERCKER_OUTPUT_DIR/operator.tar opc@OCI_K8S_179_WORKER0_IP:/scratch/operator.tar
      ssh -i /tmp/ssh_key opc@OCI_K8S_179_WORKER0_IP "sudo docker load < /scratch/operator.tar”
      ssh -i /tmp/ssh_key opc@OCI_K8S_179_WORKER1_IP "sudo docker load < /scratch/operator.tar”
      
      cp /etc/hosts $WERCKER_PIPELINE_DIR/hosts
      sed -i "$ a ${OCI_K8S_179_WORKER0_IP} ${OCI_K8S_179_WORKER0_HOSTNAME}" $WERCKER_PIPELINE_DIR/hosts
      cp $WERCKER_PIPELINE_DIR/hosts /etc/hosts
        
      # Update KUBECONFIG for K8S 1.7.9 cluster
      export K8S_NODEPORT_HOST="${OCI_K8S_179_WORKER0_HOSTNAME}"
      sed -i -e "s,%ADDRESS%,https://$OCI_K8S_179_MASTER_IP:443,g" $WERCKER_SOURCE_DIR/build/kube.config
      sed -i -e "s,%CLIENT_CERT_DATA%,$OCI_K8S_179_CLIENT_CERT_DATA,g" $WERCKER_SOURCE_DIR/build/kube.config
      sed -i -e "s,%CLIENT_KEY_DATA%,$OCI_K8S_179_CLIENT_KEY_DATA,g" $WERCKER_SOURCE_DIR/build/kube.config
      export KUBECONFIG="$WERCKER_SOURCE_DIR/build/kube.config"
        
      # running on Wercker
      export WERCKER="true"

      # install kubectl
      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      chmod +x ./kubectl
      mv ./kubectl /usr/local/bin/kubectl

      # install maven, includes java as dependency
      curl -LO http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo
      mv epel-apache-maven.repo /etc/yum.repos.d/
      yum install -y apache-maven
      export M2_HOME="/usr/share/apache-maven"
      export PATH=$M2_HOME/bin:$PATH
        
      # install opensll
      yum install -y openssl
        
      export HOST_PATH="/scratch"
      export PV_ROOT=$HOST_PATH
      export RESULT_ROOT="$WERCKER_OUTPUT_DIR/k8s_dir"
      mkdir -m 777 -p $RESULT_ROOT
      export PROJECT_ROOT="$WERCKER_SOURCE_DIR"
      $WERCKER_SOURCE_DIR/src/integration-tests/bash/cleanup.sh

      # create pull secrets
      kubectl delete secret docker-store --ignore-not-found=true
      kubectl create secret docker-registry docker-store --docker-server=index.docker.io/v1/ --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL

      kubectl delete ns test1 --ignore-not-found=true
      kubectl create ns test1
      kubectl create secret docker-registry docker-store -n test1 --docker-server=index.docker.io/v1/ --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL
        
      kubectl delete ns test2 --ignore-not-found=true
      kubectl create ns test2
      kubectl create secret docker-registry docker-store -n test2 --docker-server=index.docker.io/v1/ --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL

      export IMAGE_NAME_OPERATOR="weblogic-kubernetes-operator"
      export IMAGE_TAG_OPERATOR="$WERCKER_GIT_BRANCH"
      export IMAGE_PULL_POLICY_OPERATOR="IfNotPresent"

      export IMAGE_PULL_SECRET_WEBLOGIC="docker-store"

      echo "Integration test suite against the test image which is:"
      echo "$IMAGE_NAME:$IMAGE_TAG"

      # integration tests
      $WERCKER_SOURCE_DIR/src/integration-tests/bash/run.sh
        
      # clean up
      yum clean all

# This pipeline runs the integration tests against 1.8.5 k8s cluster on OCI.
integration-test185:
  steps:
  - script:
    name: Run integration tests
    code: |
      # Copy Docker file to OCI host and load into local Docker registry
      echo $OCI_K8S_185_SSHKEY > /tmp/ssh_key
      scp -i /tmp/ssh_key $WERCKER_OUTPUT_DIR/operator.tar opc@OCI_K8S_185_WORKER0_IP:/scratch/operator.tar
      ssh -i /tmp/ssh_key opc@OCI_K8S_185_WORKER0_IP "sudo docker load < /scratch/operator.tar”
      ssh -i /tmp/ssh_key opc@OCI_K8S_185_WORKER1_IP "sudo docker load < /scratch/operator.tar”
      
      cp /etc/hosts $WERCKER_PIPELINE_DIR/hosts
      sed -i "$ a ${OCI_K8S_185_WORKER0_IP} ${OCI_K8S_185_WORKER0_HOSTNAME}" $WERCKER_PIPELINE_DIR/hosts
      cp $WERCKER_PIPELINE_DIR/hosts /etc/hosts
        
      # Update KUBECONFIG for K8S 1.8.5 cluster
      export K8S_NODEPORT_HOST="${OCI_K8S_185_WORKER0_HOSTNAME}"
      sed -i -e "s,%ADDRESS%,https://$OCI_K8S_185_MASTER_IP:443,g" $WERCKER_SOURCE_DIR/build/kube.config
      sed -i -e "s,%CLIENT_CERT_DATA%,$OCI_K8S_185_CLIENT_CERT_DATA,g" $WERCKER_SOURCE_DIR/build/kube.config
      sed -i -e "s,%CLIENT_KEY_DATA%,$OCI_K8S_185_CLIENT_KEY_DATA,g" $WERCKER_SOURCE_DIR/build/kube.config
      export KUBECONFIG="$WERCKER_SOURCE_DIR/build/kube.config"
        
      # running on Wercker
      export WERCKER="true"

      # install kubectl
      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      chmod +x ./kubectl
      mv ./kubectl /usr/local/bin/kubectl

      # install maven, includes java as dependency
      curl -LO http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo
      mv epel-apache-maven.repo /etc/yum.repos.d/
      yum install -y apache-maven
      export M2_HOME="/usr/share/apache-maven"
      export PATH=$M2_HOME/bin:$PATH
        
      # install opensll
      yum install -y openssl
        
      export HOST_PATH="/scratch"
      export PV_ROOT=$HOST_PATH
      export RESULT_ROOT="$WERCKER_OUTPUT_DIR/k8s_dir"
      mkdir -m 777 -p $RESULT_ROOT
      export PROJECT_ROOT="$WERCKER_SOURCE_DIR"
      $WERCKER_SOURCE_DIR/src/integration-tests/bash/cleanup.sh

      # create pull secrets
      kubectl delete secret docker-store --ignore-not-found=true
      kubectl create secret docker-registry docker-store --docker-server=index.docker.io/v1/ --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL

      kubectl delete ns test1 --ignore-not-found=true
      kubectl create ns test1
      kubectl create secret docker-registry docker-store -n test1 --docker-server=index.docker.io/v1/ --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL
        
      kubectl delete ns test2 --ignore-not-found=true
      kubectl create ns test2
      kubectl create secret docker-registry docker-store -n test2 --docker-server=index.docker.io/v1/ --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL

      export IMAGE_NAME_OPERATOR="weblogic-kubernetes-operator"
      export IMAGE_TAG_OPERATOR="$WERCKER_GIT_BRANCH"
      export IMAGE_PULL_POLICY_OPERATOR="IfNotPresent"

      export IMAGE_PULL_SECRET_WEBLOGIC="docker-store"

      echo "Integration test suite against the test image which is:"
      echo "$IMAGE_NAME:$IMAGE_TAG"

      # integration tests
      $WERCKER_SOURCE_DIR/src/integration-tests/bash/run.sh
        
      # clean up
      yum clean all

# This pipeline runs quality checks 
quality:
  steps:
  - script:
    name: Install pre-reqs
    code: |
      yum -y install tar gzip
  - java/maven: 
    profiles: build-sonar 
    maven_opts: -Dsonar.login=${SONAR_LOGIN} -Dsonar.password=${SONAR_PASSWORD} -Dsonar.host.url=${SONAR_HOST} 
    goals: clean install sonar:sonar
    cache_repo: true
    version: 3.5.2

dev:
  steps:
  - internal/shell
