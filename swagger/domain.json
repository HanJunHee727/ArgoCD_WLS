{
  "swagger": "2.0",
  "info": {
   "title": "WebLogicDomain",
   "version": "v1.0.0"
  },
  "paths": {
   "/apis/weblogic.oracle/v1/namespaces/{namespace}/domains": {
    "get": {
     "description": "list or watch objects of kind Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf",
      "application/json;stream=watch",
      "application/vnd.kubernetes.protobuf;stream=watch"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "listWebLogicOracleV1NamespacedDomain",
     "parameters": [
      {
       "uniqueItems": true,
       "type": "string",
       "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
       "name": "continue",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "string",
       "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
       "name": "fieldSelector",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "boolean",
       "description": "If true, partially initialized resources are included in the response.",
       "name": "includeUninitialized",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "string",
       "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
       "name": "labelSelector",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "integer",
       "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
       "name": "limit",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "string",
       "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
       "name": "resourceVersion",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "integer",
       "description": "Timeout for the list/watch call.",
       "name": "timeoutSeconds",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "boolean",
       "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
       "name": "watch",
       "in": "query"
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.DomainList"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "list",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "post": {
     "description": "create a Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "createWebLogicOracleV1NamespacedDomain",
     "parameters": [
      {
       "name": "body",
       "in": "body",
       "required": true,
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "post",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "delete": {
     "description": "delete collection of Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "deleteWebLogicOracleV1CollectionNamespacedDomain",
     "parameters": [
      {
       "uniqueItems": true,
       "type": "string",
       "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
       "name": "continue",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "string",
       "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
       "name": "fieldSelector",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "boolean",
       "description": "If true, partially initialized resources are included in the response.",
       "name": "includeUninitialized",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "string",
       "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
       "name": "labelSelector",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "integer",
       "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
       "name": "limit",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "string",
       "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
       "name": "resourceVersion",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "integer",
       "description": "Timeout for the list/watch call.",
       "name": "timeoutSeconds",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "boolean",
       "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
       "name": "watch",
       "in": "query"
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "deletecollection",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "parameters": [
     {
      "uniqueItems": true,
      "type": "string",
      "description": "object name and auth scope, such as for teams and projects",
      "name": "namespace",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
     }
    ]
   },
   "/apis/weblogic.oracle/v1/namespaces/{namespace}/domains/{name}": {
    "get": {
     "description": "read the specified Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "readWebLogicOracleV1NamespacedDomain",
     "parameters": [
      {
       "uniqueItems": true,
       "type": "boolean",
       "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
       "name": "exact",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "boolean",
       "description": "Should this value be exported.  Export strips fields that a user can not specify.",
       "name": "export",
       "in": "query"
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "get",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "put": {
     "description": "replace the specified Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "replaceWebLogicOracleV1NamespacedDomain",
     "parameters": [
      {
       "name": "body",
       "in": "body",
       "required": true,
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "put",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "delete": {
     "description": "delete a Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "deleteWebLogicOracleV1NamespacedDomain",
     "parameters": [
      {
       "name": "body",
       "in": "body",
       "required": true,
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
       }
      },
      {
       "uniqueItems": true,
       "type": "integer",
       "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
       "name": "gracePeriodSeconds",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "boolean",
       "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
       "name": "orphanDependents",
       "in": "query"
      },
      {
       "uniqueItems": true,
       "type": "string",
       "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
       "name": "propagationPolicy",
       "in": "query"
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "delete",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "patch": {
     "description": "partially update the specified Domain",
     "consumes": [
      "application/json-patch+json",
      "application/merge-patch+json",
      "application/strategic-merge-patch+json"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "patchWebLogicOracleV1NamespacedDomain",
     "parameters": [
      {
       "name": "body",
       "in": "body",
       "required": true,
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
       }
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "patch",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "parameters": [
     {
      "uniqueItems": true,
      "type": "string",
      "description": "name of the Domain",
      "name": "name",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "object name and auth scope, such as for teams and projects",
      "name": "namespace",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
     }
    ]
   },
   "/apis/weblogic.oracle/v1/namespaces/{namespace}/domains/{name}/status": {
    "get": {
     "description": "read status of the specified Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "readWebLogicOracleV1NamespacedDomainStatus",
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "get",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "put": {
     "description": "replace status of the specified Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "replaceWebLogicOracleV1NamespacedDomainStatus",
     "parameters": [
      {
       "name": "body",
       "in": "body",
       "required": true,
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "put",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "patch": {
     "description": "partially update status of the specified Domain",
     "consumes": [
      "application/json-patch+json",
      "application/merge-patch+json",
      "application/strategic-merge-patch+json"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "patchWebLogicOracleV1NamespacedDomainStatus",
     "parameters": [
      {
       "name": "body",
       "in": "body",
       "required": true,
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
       }
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "patch",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "parameters": [
     {
      "uniqueItems": true,
      "type": "string",
      "description": "name of the Domain",
      "name": "name",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "object name and auth scope, such as for teams and projects",
      "name": "namespace",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
     }
    ]
   },
   "/apis/weblogic.oracle/v1/namespaces/{namespace}/domains/{name}/scale": {
    "get": {
     "description": "read scale of the specified Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "readWebLogicOracleV1NamespacedDomainScale",
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "get",
     "x-kubernetes-group-version-kind": {
      "group": "autoscaling",
      "kind": "Scale",
      "version": "v1"
     }
    },
    "put": {
     "description": "replace scale of the specified Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "replaceWebLogicOracleV1NamespacedDomainScale",
     "parameters": [
      {
       "name": "body",
       "in": "body",
       "required": true,
       "schema": {
        "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
       }
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "put",
     "x-kubernetes-group-version-kind": {
      "group": "autoscaling",
      "kind": "Scale",
      "version": "v1"
     }
    },
    "patch": {
     "description": "partially update scale of the specified Domain",
     "consumes": [
      "application/json-patch+json",
      "application/merge-patch+json",
      "application/strategic-merge-patch+json"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "patchWebLogicOracleV1NamespacedDomainScale",
     "parameters": [
      {
       "name": "body",
       "in": "body",
       "required": true,
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
       }
      }
     ],
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "patch",
     "x-kubernetes-group-version-kind": {
      "group": "autoscaling",
      "kind": "Scale",
      "version": "v1"
     }
    },
    "parameters": [
     {
      "uniqueItems": true,
      "type": "string",
      "description": "name of the Scale",
      "name": "name",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "object name and auth scope, such as for teams and projects",
      "name": "namespace",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
     }
    ]
   },
   "/apis/weblogic.oracle/v1/domains": {
    "get": {
     "description": "list or watch objects of kind Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf",
      "application/json;stream=watch",
      "application/vnd.kubernetes.protobuf;stream=watch"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "listWebLogicOracleV1DomainForAllNamespaces",
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.DomainList"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "list",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "parameters": [
     {
      "uniqueItems": true,
      "type": "string",
      "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
      "name": "continue",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
      "name": "fieldSelector",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "boolean",
      "description": "If true, partially initialized resources are included in the response.",
      "name": "includeUninitialized",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
      "name": "labelSelector",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "integer",
      "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
      "name": "limit",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
      "name": "resourceVersion",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "integer",
      "description": "Timeout for the list/watch call.",
      "name": "timeoutSeconds",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
      "name": "watch",
      "in": "query"
     }
    ]
   },
   "/apis/weblogic.oracle/v1/watch/namespaces/{namespace}/domains": {
    "get": {
     "description": "watch individual changes to a list of Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf",
      "application/json;stream=watch",
      "application/vnd.kubernetes.protobuf;stream=watch"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "watchWebLogicOracleV1NamespacedDomainList",
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "watchlist",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "parameters": [
     {
      "uniqueItems": true,
      "type": "string",
      "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
      "name": "continue",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
      "name": "fieldSelector",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "boolean",
      "description": "If true, partially initialized resources are included in the response.",
      "name": "includeUninitialized",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
      "name": "labelSelector",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "integer",
      "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
      "name": "limit",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "object name and auth scope, such as for teams and projects",
      "name": "namespace",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
      "name": "resourceVersion",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "integer",
      "description": "Timeout for the list/watch call.",
      "name": "timeoutSeconds",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
      "name": "watch",
      "in": "query"
     }
    ]
   },
   "/apis/weblogic.oracle/v1/watch/namespaces/{namespace}/domains/{name}": {
    "get": {
     "description": "watch changes to an object of kind Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf",
      "application/json;stream=watch",
      "application/vnd.kubernetes.protobuf;stream=watch"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "watchWebLogicOracleV1NamespacedDomain",
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "watch",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "parameters": [
     {
      "uniqueItems": true,
      "type": "string",
      "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
      "name": "continue",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
      "name": "fieldSelector",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "boolean",
      "description": "If true, partially initialized resources are included in the response.",
      "name": "includeUninitialized",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
      "name": "labelSelector",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "integer",
      "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
      "name": "limit",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "name of the Pod",
      "name": "name",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "object name and auth scope, such as for teams and projects",
      "name": "namespace",
      "in": "path",
      "required": true
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
      "name": "resourceVersion",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "integer",
      "description": "Timeout for the list/watch call.",
      "name": "timeoutSeconds",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
      "name": "watch",
      "in": "query"
     }
    ]
   },
   "/apis/weblogic.oracle/v1/watch/domains": {
    "get": {
     "description": "watch individual changes to a list of Domain",
     "consumes": [
      "*/*"
     ],
     "produces": [
      "application/json",
      "application/yaml",
      "application/vnd.kubernetes.protobuf",
      "application/json;stream=watch",
      "application/vnd.kubernetes.protobuf;stream=watch"
     ],
     "schemes": [
      "https"
     ],
     "tags": [
      "weblogic_v1"
     ],
     "operationId": "watchWebLogicOracleV1DomainListForAllNamespaces",
     "responses": {
      "200": {
       "description": "OK",
       "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
       }
      },
      "401": {
       "description": "Unauthorized"
      }
     },
     "x-kubernetes-action": "watchlist",
     "x-kubernetes-group-version-kind": {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    },
    "parameters": [
     {
      "uniqueItems": true,
      "type": "string",
      "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
      "name": "continue",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
      "name": "fieldSelector",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "boolean",
      "description": "If true, partially initialized resources are included in the response.",
      "name": "includeUninitialized",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
      "name": "labelSelector",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "integer",
      "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
      "name": "limit",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "string",
      "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
      "name": "resourceVersion",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "integer",
      "description": "Timeout for the list/watch call.",
      "name": "timeoutSeconds",
      "in": "query"
     },
     {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
      "name": "watch",
      "in": "query"
     }
    ]
   }
  },
  "definitions": {
   "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
    "description": "Placeholder for io.k8s.apimachinery.pkg.apis.meta.v1.Status",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
    "description": "Placeholder for io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "io.k8s.api.core.v1.EnvVar": {
    "description": "Placeholder for io.k8s.api.core.v1.EnvVar",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "io.k8s.api.core.v1.SecretReference": {
    "description": "Placeholder for io.k8s.api.core.v1.SecretReference",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
    "description": "Placeholder for io.k8s.apimachinery.pkg.apis.meta.v1.Patch",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "io.k8s.api.autoscaling.v1.Scale": {
    "description": "Placeholder for io.k8s.api.autoscaling.v1.Scale",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
    "description": "Placeholder for io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
    "type": "string",
    "format": "date-time"
   },
   "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
    "description": "Placeholder for io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
    "description": "Placeholder for io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent",
    "properties": {
     "name": {
      "description": "",
      "type": "string"
     }
    }
   },
   "oracle.kubernetes.weblogic.domain.v1.Domain": {
    "description": "Domain represents a WebLogic domain and how it will be realized in the Kubernetes cluster.",
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
     },
     "spec": {
      "description": "Specification of the desired behavior of the domain. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
      "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.DomainSpec"
     },
     "status": {
      "description": "Most recently observed status of the domain. This data may not be up to date. Populated by the operator. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
      "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.DomainStatus"
     }
    },
    "x-kubernetes-group-version-kind": [
     {
      "group": "weblogic.oracle",
      "kind": "Domain",
      "version": "v1"
     }
    ]
   },
   "oracle.kubernetes.weblogic.domain.v1.DomainCondition": {
    "description": "DomainCondition contains details for the current condition of this domain.",
    "required": [
     "type",
     "status"
    ],
    "properties": {
     "lastProbeTime": {
      "description": "Last time we probed the condition.",
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
     },
     "lastTransitionTime": {
      "description": "Last time the condition transitioned from one status to another.",
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
     },
     "message": {
      "description": "Human-readable message indicating details about last transition.",
      "type": "string"
     },
     "reason": {
      "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
      "type": "string"
     },
     "status": {
      "description": "Status is the status of the condition. Can be True, False, Unknown.",
      "type": "string"
     },
     "type": {
      "description": "Type is the type of the condition. Currently, valid types are Progressing, Available, and Failure.",
      "type": "string"
     }
    }
   },
   "oracle.kubernetes.weblogic.domain.v1.DomainList": {
    "description": "DomainList is a list of Domains.",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
     },
     "items": {
      "description": "List of domains. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
      "type": "array",
      "items": {
       "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.Domain"
      }
     },
     "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
     },
     "metadata": {
      "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
     }
    },
    "x-kubernetes-group-version-kind": [
     {
      "group": "weblogic.oracle",
      "kind": "DomainList",
      "version": "v1"
     }
    ]
   },
   "oracle.kubernetes.weblogic.domain.v1.ServerStartup": {
    "description": "ServerStarup describes the desired startup state and passed environment variables for a specific managed server.",
    "required": [
     "serverName"
    ],
    "properties": {
     "desiredState": {
      "description": "Desired startup state.  Legal values are RUNNING or ADMIN.",
      "type": "string"
     },
     "serverName": {
      "description": "Managed server name of instance to start.",
      "type": "string"
     },
     "nodePort": {
      "description": "Managed server NodePort port.  The port on each node on which this managed server will be exposed.  If specified, this value must be an unused port.  By default, the server will not be exposed outside the Kubernetes cluster.",
      "type": "integer"
     },
     "env": {
      "description": "Environment variables to pass while starting this managed server.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
      }
     }
    }
   },
   "oracle.kubernetes.weblogic.domain.v1.ClusterStartup": {
    "description": "ClusterStarup describes the desired startup state and passed environment variables for a specific cluster.",
    "required": [
     "clusterName"
    ],
    "properties": {
     "desiredState": {
      "description": "Desired startup state for any managed server started in this cluster. Legal values are RUNNING or ADMIN.",
      "type": "string"
     },
     "clusterName": {
      "description": "Name of specific cluster to start.  Managed servers in the cluster will be started beginning with replicas instances.",
      "type": "string"
     },
     "replicas": {
      "description": "Replicas is the desired number of managed servers running for this cluster.",
      "type": "integer",
      "format": "int32"
     },
     "env": {
      "description": "Environment variables to pass while starting managed servers in this cluster.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
      }
     }
    }
   },
   "oracle.kubernetes.weblogic.domain.v1.DomainSpec": {
    "description": "DomainSpec is a description of a domain.",
    "required": [
     "domainUID",
     "domainName",
     "adminSecret",
     "asName",
     "asPort"
    ],
    "properties": {
     "domainUID": {
      "description": "Domain unique identifier.  Must be unique across the Kubernetes cluster.",
      "type": "string"
     },
     "domainName": {
      "description": "Domain name",
      "type": "string"
     },
     "image": {
      "description": "WebLogic Docker image.  Defaults to store/oracle/weblogic:12.2.1.3",
      "type": "string"
     },
     "imagePullPolicy": {
      "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
      "type": "string"
     },
     "adminSecret": {
      "description": "Reference to secret containing domain administrator username and password.  Secret must contain keys names 'username' and 'password'",
      "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
     },
     "asName": {
      "description": "Admin server name.  Note: Possibly temporary as we could find this value through domain home inspection.",
      "type": "string"
     },
     "asPort": {
      "description": "Administration server port.  Note: Possibly temporary as we could find this value through domain home inspection.",
      "type": "integer"
     },
     "asNodePort": {
      "description": "Administration server NodePort port.  The port on each node on which the administration server will be exposed.  If specified, this value must be an unused port.  By default, the administration server will not be exposed outside the Kubernetes cluster.",
      "type": "integer"
     },
     "exportT3Channels": {
      "description": "List of specific T3 channels to export.  Named T3 Channels will be exposed using NodePort Services.  The internal and external ports must match; therefore, it is required that the channel's port in the WebLogic configuration be a legal and unique value in the Kubernetes cluster's legal NodePort port range.",
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "startupControl": {
      "description": "Controls which managed servers will be started.  Legal values are ADMIN, ALL, SPECIFIED or AUTO.  Defaults to AUTO.  ADMIN indicates that only the administration server is started.  ALL indicates that all servers in the domain will be started.  SPECIFIED indicates that the administration server is started and then additionally only those servers listed under serverStartup or managed servers belonging to clusters listed under clusterStartup up to the cluster's replicas field will be started.  AUTO indicates that servers will be started exactly as with SPECIFIED, but then managed servers belonging to clusters not listed under clusterStartup will be started up to the replicas field.",
      "type": "string"
     },
     "serverStartup": {
      "description": "List of server startup details for selected servers.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.ServerStartup"
      }
     },
     "clusterStartup": {
      "description": "List of server startup details for selected clusters",
      "type": "array",
      "items": {
       "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.ClusterStartup"
      }
     },
     "replicas": {
      "description": "Replicas is the desired number of managed servers running in each WebLogic cluster that is not configured under clusterStartup.  Provided so that administrators can scale the Domain resource.  Ignored if startupControl is not AUTO.",
      "type": "integer",
      "format": "int32"
     }
    }
   },
   "oracle.kubernetes.weblogic.domain.v1.DomainStatus": {
    "description": "DomainStatus represents information about the status of a domain. Status may trail the actual state of a system.",
    "properties": {
     "conditions": {
      "description": "Current service state of domain.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/oracle.kubernetes.weblogic.domain.v1.DomainCondition"
      },
      "x-kubernetes-patch-merge-key": "type",
      "x-kubernetes-patch-strategy": "merge"
     },
     "message": {
      "description": "A human readable message indicating details about why the domain is in this condition.",
      "type": "string"
     },
     "reason": {
      "description": "A brief CamelCase message indicating details about why the domain is in this state.",
      "type": "string"
     },
     "availableServers": {
      "description": "List of specific server instances that are available.",
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "unavailableServers": {
      "description": "List of specific server instances that are configured to be available but that are either not yet available or have failed.",
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "availableClusters": {
      "description": "List of specific cluster instances where the configured number of replicas are now available.",
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "unavailableClusters": {
      "description": "List of specific cluster instances to configured to be available but for which one or more of the necessary replicas are either not yet available or have failed.",
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "startTime": {
      "description": "RFC 3339 date and time at which the operator started the domain.  This will be when the operator begins processing and will precede when the various servers or clusters are available.",
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
     }
    }
   }
  },
  "securityDefinitions": {
   "BearerToken": {
    "description": "Bearer Token authentication",
    "type": "apiKey",
    "name": "authorization",
    "in": "header"
   }
  },
  "security": [
   {
    "BearerToken": []
   }
  ]
 }
